import * as vscode from 'vscode';
import { Personality, IDEFile } from '../models/personality';

export class IDEWriterService {
  
  async applyPersonalityToIDE(
    personality: Personality,
    ideFile: IDEFile
  ): Promise<void> {
    const updatedContent = this.generateIDEContent(personality, ideFile);
    
    // Show diff before applying
    const proceed = await this.showDiffAndConfirm(ideFile, updatedContent);
    if (!proceed) {
      return;
    }

    // Backup existing file
    await this.backupFile(ideFile);

    // Write updated content
    await vscode.workspace.fs.writeFile(
      vscode.Uri.file(ideFile.path),
      Buffer.from(updatedContent, 'utf8')
    );

    vscode.window.showInformationMessage(
      `Updated ${ideFile.type.toUpperCase()} configuration with personality: ${personality.name}`
    );
  }

  private generateIDEContent(personality: Personality, ideFile: IDEFile): string {
    switch (ideFile.type) {
      case 'claude':
        return this.generateClaudeContent(personality, ideFile.content);
      case 'cursor':
        return this.generateCursorContent(personality);
      case 'windsurf':
        return this.generateWindsurfContent(personality);
      case 'continue':
        return this.generateContinueContent(personality, ideFile.content);
      default:
        throw new Error(`Unsupported IDE type: ${ideFile.type}`);
    }
  }

  private generateClaudeContent(personality: Personality, existingContent: string): string {
    // Check if there's existing CLAUDE.md content to preserve
    const hasExistingInstructions = existingContent.includes('# CLAUDE.md') || 
                                   existingContent.includes('# Claude Instructions');
    
    const personalitySection = `
# Claude Personality Configuration

The following information MUST be used to guide the style of text output to the user. This is a kind of personality that Claude will take on and emulate through interactions with the user.

## Profile: ${personality.name}

**Description**: ${personality.description}

## Communication Guidelines

${this.formatTraits(personality)}

## Behavioral Patterns

${personality.context}

## Implementation Notes
- Embody these characteristics consistently throughout conversations
- Adapt the personality to the context while maintaining core traits
- Balance personality expression with helpfulness and accuracy
`;

    if (hasExistingInstructions) {
      // Preserve existing content and add/update personality section
      const personalityMarkerStart = '# Claude Personality Configuration';
      const personalityMarkerEnd = '## Implementation Notes';
      
      if (existingContent.includes(personalityMarkerStart)) {
        // Replace existing personality section
        const startIndex = existingContent.indexOf(personalityMarkerStart);
        const endIndex = existingContent.indexOf('\n\n', existingContent.indexOf(personalityMarkerEnd));
        
        return existingContent.substring(0, startIndex) + 
               personalitySection.trim() + 
               existingContent.substring(endIndex);
      } else {
        // Add personality section at the beginning
        return personalitySection + '\n\n' + existingContent;
      }
    } else {
      // Create new CLAUDE.md with personality
      return `# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

${personalitySection}`;
    }
  }

  private generateCursorContent(personality: Personality): string {
    return `# Cursor Rules

## AI Assistant Personality: ${personality.name}

${personality.description}

### Key Traits:
${this.formatTraits(personality)}

### Context:
${personality.context}

### Guidelines:
- Apply these personality traits in all interactions
- Maintain consistency with the defined characteristics
- Balance personality with technical accuracy
`;
  }

  private generateWindsurfContent(personality: Personality): string {
    return `# Windsurf Rules

## Personality Configuration

**Name**: ${personality.name}
**Description**: ${personality.description}

### Traits:
${this.formatTraits(personality)}

### Behavioral Context:
${personality.context}

---
Generated by Covibe VS Code Extension
`;
  }

  private generateContinueContent(personality: Personality, existingContent: string): string {
    try {
      const config = JSON.parse(existingContent);
      
      config.rules = config.rules || [];
      config.personality = {
        name: personality.name,
        description: personality.description,
        traits: personality.traits.map(t => ({
          category: t.category,
          name: t.name,
          value: t.value
        }))
      };

      return JSON.stringify(config, null, 2);
    } catch (error) {
      // If existing content is not valid JSON, create new
      return JSON.stringify({
        rules: [],
        personality: {
          name: personality.name,
          description: personality.description,
          traits: personality.traits
        }
      }, null, 2);
    }
  }

  private formatTraits(personality: Personality): string {
    const traitsByCategory = personality.traits.reduce((acc, trait) => {
      if (!acc[trait.category]) {
        acc[trait.category] = [];
      }
      acc[trait.category]!.push(trait);
      return acc;
    }, {} as Record<string, typeof personality.traits>);

    return Object.entries(traitsByCategory)
      .map(([category, traits]) => {
        const categoryTitle = category.charAt(0).toUpperCase() + category.slice(1);
        const traitsList = traits
          .sort((a, b) => {
            const priorityOrder = { high: 0, medium: 1, low: 2 };
            return priorityOrder[a.priority] - priorityOrder[b.priority];
          })
          .map(t => `- **${t.name}**: ${t.value} (${t.priority} priority)`)
          .join('\n');
        
        return `### ${categoryTitle} Traits:\n${traitsList}`;
      })
      .join('\n\n');
  }

  private async showDiffAndConfirm(ideFile: IDEFile, _newContent: string): Promise<boolean> {
    // For MVP, just show confirmation dialog
    // In future, could show actual diff view
    const action = await vscode.window.showInformationMessage(
      `Update ${ideFile.type.toUpperCase()} configuration file?`,
      { modal: true },
      'Update',
      'Cancel'
    );

    return action === 'Update';
  }

  private async backupFile(ideFile: IDEFile): Promise<void> {
    const backupPath = `${ideFile.path}.backup-${Date.now()}`;
    
    try {
      await vscode.workspace.fs.copy(
        vscode.Uri.file(ideFile.path),
        vscode.Uri.file(backupPath),
        { overwrite: false }
      );
    } catch (error) {
      // File might not exist yet, that's ok
    }
  }
}